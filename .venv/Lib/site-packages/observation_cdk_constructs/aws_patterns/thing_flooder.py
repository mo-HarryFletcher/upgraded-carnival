from aws_cdk import core, aws_iam as iam
from src.observation_cdk_constructs.aws_services.iot_core import IotResources
from .data_flooder import DataFlooder


class ThingFlooder(core.Construct):
    def __init__(
        self,
        scope: core.Construct,
        id: str,
        bucket_name: str,
        cert_arns: dict,
        buffer_interval: int,
        delete_bucket_on_teardown: bool,
        delete_stream_on_teardown: bool,
        **kwargs
    ) -> None:
        super().__init__(scope, id, **kwargs)

        data_flooder = DataFlooder(
            self,
            "dataflooder",
            bucket_name=bucket_name,
            buffer_interval=buffer_interval,
            delete_bucket_on_teardown=delete_bucket_on_teardown,
            delete_stream_on_teardown=delete_stream_on_teardown,
        )

        self.stream_name = data_flooder.stream.get_stream_name()

        # TODO: Split IAM stuff out into its own single construct.
        iot_rule_principal = iam.ServicePrincipal(
            service="iot.amazonaws.com",  # TODO: limit to topic rule perhaps
        )
        iot_write_to_kinesis_stream_iam_role = iam.Role(
            self,
            "iot-write-to-stream-role",
            assumed_by=iot_rule_principal,
        )

        # TODO: reduce to only the permissions we actually need.
        iot_write_to_kinesis_stream_policy = (
            iam.ManagedPolicy.from_aws_managed_policy_name("AmazonKinesisFullAccess")
        )

        iot_write_to_kinesis_stream_iam_role.add_managed_policy(
            iot_write_to_kinesis_stream_policy
        )

        for location in cert_arns:
            node_cert_arn = cert_arns[location]
            iot_resources = IotResources(
                self,
                location + "-resources",
                stream_name=self.stream_name,
                location=location,
                node_cert_arn=node_cert_arn,
                talk_to_kinesis_role_arn=iot_write_to_kinesis_stream_iam_role.role_arn,
            )
