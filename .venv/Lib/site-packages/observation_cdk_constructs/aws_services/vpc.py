import secrets
from aws_cdk import core
import aws_cdk.aws_ec2 as ec2


class Vpc(core.Construct):
    def __init__(
        self,
        scope: core.Construct,
        id: str,
        vpc_name: str,
        cidr: str,
        max_azs: int,
        subnet_configuration: list,
        gateway_endpoints={},
        optional_vpc_endpoints={},
        **kwargs
    ) -> None:
        super().__init__(scope, id, **kwargs)

        self.vpc = ec2.Vpc(
            self,
            "NETWORK_NAME",
            cidr=cidr,
            nat_gateways=0,
            max_azs=max_azs,
            subnet_configuration=subnet_configuration,
        )

        core.Tags.of(self.vpc).add("Name", vpc_name)

        for gateway_endpoint in gateway_endpoints:
            self.vpc.add_gateway_endpoint(
                gateway_endpoint, service=gateway_endpoints[gateway_endpoint]
            )

        self.security_group = ec2.SecurityGroup(
            self,
            "VPC_ENDPOINT_SG",
            allow_all_outbound=True,
            security_group_name="security-group-name",
            vpc=self.vpc,
        )

        ec2.InterfaceVpcEndpoint(
            self,
            "DOCKER",
            vpc=self.vpc,
            service=ec2.InterfaceVpcEndpointAwsService.ECR_DOCKER,
            security_groups=[self.security_group],
        )

        ec2.InterfaceVpcEndpoint(
            self,
            "LOGS",
            vpc=self.vpc,
            service=ec2.InterfaceVpcEndpointAwsService.CLOUDWATCH_LOGS,
            security_groups=[self.security_group],
        )

        ec2.InterfaceVpcEndpoint(
            self,
            "MONITOR",
            vpc=self.vpc,
            service=ec2.InterfaceVpcEndpointAwsService.CLOUDWATCH,
            security_groups=[self.security_group],
        )

        ec2.InterfaceVpcEndpoint(
            self,
            "ECR_API",
            vpc=self.vpc,
            service=ec2.InterfaceVpcEndpointAwsService.ECR,
            security_groups=[self.security_group],
        )

        ec2.InterfaceVpcEndpoint(
            self,
            "SSM",
            vpc=self.vpc,
            service=ec2.InterfaceVpcEndpointAwsService.SSM,
            security_groups=[self.security_group],
        )

        ec2.InterfaceVpcEndpoint(
            self,
            "ECS_AGENT",
            vpc=self.vpc,
            service=ec2.InterfaceVpcEndpointAwsService.ECS_AGENT,
            security_groups=[self.security_group],
        )

        ec2.InterfaceVpcEndpoint(
            self,
            "ECS",
            vpc=self.vpc,
            service=ec2.InterfaceVpcEndpointAwsService.ECS,
            security_groups=[self.security_group],
        )

        for vpc_endpoint in optional_vpc_endpoints:
            ec2.InterfaceVpcEndpoint(
                self,
                vpc_endpoint,
                vpc=self.vpc,
                service=optional_vpc_endpoints[vpc_endpoint],
                security_groups=[self.security_group],
            )
