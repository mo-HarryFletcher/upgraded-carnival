from aws_cdk import core
from aws_cdk.aws_cloudwatch import (
    Color,
    Dashboard,
    GraphWidget,
    HorizontalAnnotation,
    Metric,
    YAxisProps,
)
from aws_cdk.aws_ec2 import Vpc, SecurityGroup
from aws_cdk.aws_ecs import (
    Cluster,
    AwsLogDriver,
    FargateService,
    FargateTaskDefinition,
    ContainerImage,
)
from aws_cdk.aws_ecr import Repository
from aws_cdk.aws_iam import Role, ServicePrincipal, ManagedPolicy
from aws_cdk.aws_logs import LogGroup


def add_managed_policies_to_ecs_iam_roles(
    task_role,
    execution_role,
    common_list_of_policies,
    additional_policies_for_task_role,
):

    for policy in common_list_of_policies:
        execution_role.add_managed_policy(
            ManagedPolicy.from_aws_managed_policy_name(policy)
        )
        task_role.add_managed_policy(ManagedPolicy.from_aws_managed_policy_name(policy))

    for policy in additional_policies_for_task_role:
        task_role.add_managed_policy(ManagedPolicy.from_aws_managed_policy_name(policy))


class Fargate(core.Construct):
    def __init__(
        self,
        scope: core.Construct,
        id: str,
        vpc: Vpc,
        ecr_repository_name: str,
        cpu: int,
        memory: int,
        region: str,
        application_name: str,
        registry: str,
        environment_vars={},
        common_list_of_policies=[],
        additional_policies_for_task_role=[],
        stream_prefix=None,
        log_group_name=None,
        **kwargs,
    ) -> None:
        super().__init__(scope, id, **kwargs)

        self.security_group = SecurityGroup(
            self,
            "FARGATE_SG",
            allow_all_outbound=True,
            security_group_name="FargateSecurityGroup",
            vpc=vpc,
        )

        """
        There are two roles required by ECS, a Task Role (1) and an Execution Role (2).
        (1) Used by the task to communicate to other AWS services.
        (2) Used to execute ECS actions, such as pulling container images and storing applicationlogs in CloudWatch.
        """
        self.task_role = Role(
            self,
            "ECS_TASK_ROLE",
            assumed_by=ServicePrincipal("ecs-tasks.amazonaws.com"),
        )
        self.task_role.apply_removal_policy(core.RemovalPolicy.DESTROY)

        self.execution_role = Role(
            self,
            "ECS_EXECUTION_ROLE",
            assumed_by=ServicePrincipal("ecs-tasks.amazonaws.com"),
        )
        self.execution_role.apply_removal_policy(core.RemovalPolicy.DESTROY)

        add_managed_policies_to_ecs_iam_roles(
            self.task_role,
            self.execution_role,
            common_list_of_policies,
            additional_policies_for_task_role,
        )

        self.cluster = Cluster(
            self,
            "ECS_CLUSTER",
            vpc=vpc,
            cluster_name=f"cluster-name",
        )

        self.repo = Repository.from_repository_name(
            self, "ECR_REPOSITORY-NAME", ecr_repository_name
        )

        if stream_prefix != None:
            self.log_group = LogGroup(
                self,
                "LOG_GROUP_NAME",
                log_group_name=log_group_name,
                removal_policy=core.RemovalPolicy.DESTROY,
            )

            self.logging = AwsLogDriver(
                log_group=self.log_group, stream_prefix=stream_prefix
            )

        self.task_definiton = FargateTaskDefinition(
            self,
            "FARGATE_TASK_DEFINITION",
            cpu=cpu,
            memory_limit_mib=memory,
            task_role=self.task_role,
            execution_role=self.execution_role,
        )

        container_environment_variables = {
            "REGION": region,
            "APPLICATION_NAME": application_name,
        }
        container_environment_variables.update(environment_vars)

        if stream_prefix != None:
            self.task_definiton.add_container(
                "FARGATE_CONTAINER",
                image=ContainerImage.from_registry(registry),
                logging=self.logging,
                container_name=f"container-name",
                environment=container_environment_variables,
            )
        else:
            self.task_definiton.add_container(
                "FARGATE_CONTAINER",
                image=ContainerImage.from_registry(registry),
                container_name=f"container-name",
                environment=container_environment_variables,
            )

        self.service = FargateService(
            self,
            "FARGATE_SERVICE",
            task_definition=self.task_definiton,
            security_group=self.security_group,
            cluster=self.cluster,
            assign_public_ip=False,
            desired_count=1,
            service_name=f"service-name",
        )
