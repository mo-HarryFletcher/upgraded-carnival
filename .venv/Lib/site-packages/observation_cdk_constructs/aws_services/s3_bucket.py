from aws_cdk import aws_s3 as s3, aws_iam as iam, core


class S3Bucket(core.Construct):
    def __init__(
        self,
        scope: core.Construct,
        id: str,
        bucket_name: str,
        delete_bucket_on_teardown=False,
        **kwargs
    ) -> None:
        super().__init__(scope, id, **kwargs)

        encryption = s3.BucketEncryption("S3_MANAGED")
        public_access = s3.BlockPublicAccess.BLOCK_ALL
        removal_policy = core.RemovalPolicy.DESTROY
        object_ownership = s3.ObjectOwnership.BUCKET_OWNER_ENFORCED

        self.bucket = s3.Bucket(
            self,
            id,
            bucket_name=bucket_name,
            block_public_access=public_access,
            encryption=encryption,
            removal_policy=removal_policy,
            auto_delete_objects=delete_bucket_on_teardown,
            object_ownership=object_ownership,
        )

        enforce_secure_connections_policy = iam.PolicyStatement(
            actions=["s3:*"],
            effect=iam.Effect.DENY,
            principals=[iam.AnyPrincipal()],
            resources=[self.bucket.bucket_arn, self.bucket.bucket_arn + "/*"],
            conditions={
                "Bool": {
                    "aws:SecureTransport": "false",
                },
            },
        )

        self.bucket.add_to_resource_policy(enforce_secure_connections_policy)
